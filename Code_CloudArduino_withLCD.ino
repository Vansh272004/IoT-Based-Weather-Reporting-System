/* 
  Sketch generated by the Arduino IoT Cloud Thing "CloudArduino_withLCD"
  https://create.arduino.cc/cloud/things/531bd828-f63a-4784-ad53-78d29189d9bd 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float ambient_light;
  float co;
  float humi;
  float press;
  float temp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"#include <Wire.h>               // Include the Wire library for I2C communication
#include <LiquidCrystal_I2C.h>  // Include the LiquidCrystal_I2C library for LCD display
#include <DHT.h>                // Include the DHT library for DHT22 sensor
#include <LTR390.h>             // Include the LTR390 library for the light and UV sensor
#include <Adafruit_BMP280.h>    // Include the Adafruit BMP280 library for pressure and altitude sensor

#define DHTPIN 3           // Digital pin connected to the DHT sensor
#define DHTTYPE DHT22      // DHT sensor type
DHT dht(DHTPIN, DHTTYPE);  // Initialize DHT sensor

const int MQ9_PIN = A1;           // Analog pin connected to the MQ-9 sensor
const int RAIN_PIN = A7;          // Analog pin connected to the Rain Drop sensor
const int RAIN_THRESHOLD = 700;   // Define the rain threshold value
const int RAIN_MAX_VALUE = 4095;  // Maximum value of the rain sensor

#define I2C_LCD_ADDRESS 0x27     // I2C address for the LCD
#define I2C_LTR390_ADDRESS 0x53  // I2C address for the LTR390 sensor
#define TCAADDR 0x70             // TCA9548A I2C address

LiquidCrystal_I2C lcd(I2C_LCD_ADDRESS, 16, 2);  // Set the LCD address, columns, and rows
LTR390 ltr390(I2C_LTR390_ADDRESS);              // Initialize the LTR390 sensor
Adafruit_BMP280 bmp280;                         // Initialize the BMP280 sensor

void tcaSelect(uint8_t i) {
  if (i > 7) return;
  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();
}

float calculateDewPoint(float temperature, float humidity) {
  // Constants for the Magnus formula
  const float a = 17.27;
  const float b = 237.7;

  // Magnus formula
  float alpha = ((a * temperature) / (b + temperature)) + log(humidity / 100.0);
  float dewPoint = (b * alpha) / (a - alpha);
  return dewPoint;
}
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  Wire.begin();        // Initialize I2C communication

  // Start sensor initializations
  dht.begin();  // Start DHT sensor

  // Select the channel for LCD
  tcaSelect(2);     // Assume LCD is on channel 2
  lcd.init();       // Initialize LCD
  lcd.backlight();  // Turn on backlight

  // Select the channel for LTR390
  tcaSelect(6);  // Assume LTR390 is on channel 6
  if (!ltr390.init()) {
    Serial.println("LTR390 not connected!");
  }
  ltr390.setMode(LTR390_MODE_ALS);
  ltr390.setGain(LTR390_GAIN_3);
  ltr390.setResolution(LTR390_RESOLUTION_18BIT);

  // Select the channel for BMP280
  tcaSelect(7);  // Assume BMP280 is on channel 7
  if (!bmp280.begin(0x76)) {
    Serial.println("BMP280 not connected!");
  }
  bmp280.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                     Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                     Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                     Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                     Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */
  // End sensor initializations

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
    delay(1000);  // Delay between readings

  // Read data from analog and digital pins
  float temperature = dht.readTemperature();  // Read temperature
  int humidity = dht.readHumidity();          // Read humidity

  float mq9Value = analogRead(MQ9_PIN);         // Read value from MQ-9 sensor
  float voltage = mq9Value * (3.3 / 4095.0);    // Convert analog value to voltage
  float mq9_ppm = (voltage - 0.1) * 100 / 0.8;  // Convert voltage to ppm (Parts Per Million)

  int rainValue = analogRead(RAIN_PIN);                            // Read value from Rain Drop sensor
  int rainPercentage = map(rainValue, 0, RAIN_MAX_VALUE, 100, 0);  // Map the rain value to a percentage

  if (isnan(temperature) || isnan(humidity)) {  // Check if any DHT reading failed
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  float dewPoint = calculateDewPoint(temperature, humidity);

  // Read data from LTR390 using TCA9548A
  tcaSelect(6);  // Select channel 6 for LTR390
  float lux = 0;
  float uvi = 0;
  if (ltr390.newDataAvailable()) {
    if (ltr390.getMode() == LTR390_MODE_ALS) {
      lux = ltr390.getLux();
      ltr390.setGain(LTR390_GAIN_18);                 // Recommended for UVI - x18
      ltr390.setResolution(LTR390_RESOLUTION_20BIT);  // Recommended for UVI - 20-bit
      ltr390.setMode(LTR390_MODE_UVS);
      delay(100);  // Small delay to allow mode switch
      uvi = ltr390.getUVI();
      ltr390.setGain(LTR390_GAIN_3);                  // Recommended for Lux - x3
      ltr390.setResolution(LTR390_RESOLUTION_18BIT);  // Recommended for Lux - 18-bit
      ltr390.setMode(LTR390_MODE_ALS);
    }
  }

  // Read data from BMP280 using TCA9548A
  tcaSelect(7);  // Select channel 7 for BMP280
  float pressure = bmp280.readPressure() / 1000;  // Convert to hPa
  float altitude = bmp280.readAltitude(1013.25);    // Calculate altitude with a baseline pressure

  // Print data to Serial
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" °C\t");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");

  Serial.print("CO PPM: ");
  Serial.print(mq9_ppm);
  Serial.println(" ppm");

  Serial.print("Rain Drop Value: ");
  Serial.println(rainValue);

  Serial.print("Ambient Light: ");
  Serial.print(lux);
  Serial.println(" Lux");

  Serial.print("UV Index: ");
  Serial.println(uvi);

  Serial.print("Pressure: ");
  Serial.print(pressure);
  Serial.println(" kPa");

  Serial.print("Altitude: ");
  Serial.print(altitude);
  Serial.println(" m");
  
  Serial.print("Dew: ");
  Serial.print(dewPoint);
  Serial.println(" °C");
  Serial.println("");
  
  // Select the channel for LCD
  tcaSelect(2);  // Select channel 2 for LCD

  // Display data on LCD
  lcd.clear();  // Clear the LCD display

  lcd.setCursor(0, 0);  // Set cursor to the first column and first row
  lcd.print("Temp:");
  lcd.print(temperature);
  lcd.print("C");

  lcd.setCursor(0, 1);  // Set cursor to the first column and second row
  lcd.print("Humi:");
  lcd.print(humidity);
  lcd.print("%");

  delay(2000);

  lcd.clear();
  lcd.setCursor(0, 0);  // Set cursor to the first column and first row
  lcd.print("CO:");
  lcd.print(mq9_ppm);
  lcd.print("ppm");

  lcd.setCursor(0, 1);  // Set cursor to the first column and second row
  lcd.print("Rain:");
  lcd.print(rainPercentage);
  lcd.print("%");

  delay(2000);

  lcd.clear();
  lcd.setCursor(0, 0);  // Set cursor to the first column and first row
  lcd.print("Lux:");
  lcd.print(lux);
  lcd.print("lux");

  lcd.setCursor(0, 1);  // Set cursor to the first column and second row
  lcd.print("UV Index:");
  lcd.print(uvi);

  delay(2000);

  lcd.clear();
  lcd.setCursor(0, 0);  // Set cursor to the first column and first row
  lcd.print("Press:");
  lcd.print(pressure);
  lcd.print("kPa");

  lcd.setCursor(0, 1);  // Set cursor to the first column and second row
  lcd.print("Alt:");
  lcd.print(altitude);
  lcd.print("m");

  delay(2000);
  
  lcd.clear();
  lcd.setCursor(0, 0);  // Set cursor to the first column and first row
  lcd.print("Dew:");
  lcd.print(dewPoint);
  lcd.print("C");

  delay(2000);

  ambient_light = lux;
  co = mq9_ppm;
  humi = humidity;
  press = pressure;
  temp = temperature;
  
}

/*
  Since Temp is READ_WRITE variable, onTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempChange()  {
  // Add your code here to act upon Temp change
}

/*
  Since Humi is READ_WRITE variable, onHumiChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumiChange()  {
  // Add your code here to act upon Humi change
}

/*
  Since Co is READ_WRITE variable, onCoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCoChange()  {
  // Add your code here to act upon Co change
}

/*
  Since AmbientLight is READ_WRITE variable, onAmbientLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAmbientLightChange()  {
  // Add your code here to act upon AmbientLight change
}

/*
  Since Pressure is READ_WRITE variable, onPressureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPressureChange()  {
  // Add your code here to act upon Pressure change
}


/*
  Since Press is READ_WRITE variable, onPressChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPressChange()  {
  // Add your code here to act upon Press change
}
